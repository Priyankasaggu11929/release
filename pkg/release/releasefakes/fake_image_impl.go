/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	"github.com/Priyankasaggu11929/release-sdk/sign"
)

type FakeImageImpl struct {
	ExecuteStub        func(string, ...string) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	executeReturns struct {
		result1 error
	}
	executeReturnsOnCall map[int]struct {
		result1 error
	}
	ExecuteOutputStub        func(string, ...string) (string, error)
	executeOutputMutex       sync.RWMutex
	executeOutputArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	executeOutputReturns struct {
		result1 string
		result2 error
	}
	executeOutputReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RepoTagFromTarballStub        func(string) (string, error)
	repoTagFromTarballMutex       sync.RWMutex
	repoTagFromTarballArgsForCall []struct {
		arg1 string
	}
	repoTagFromTarballReturns struct {
		result1 string
		result2 error
	}
	repoTagFromTarballReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SignImageStub        func(*sign.Signer, string) error
	signImageMutex       sync.RWMutex
	signImageArgsForCall []struct {
		arg1 *sign.Signer
		arg2 string
	}
	signImageReturns struct {
		result1 error
	}
	signImageReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyImageStub        func(*sign.Signer, string) error
	verifyImageMutex       sync.RWMutex
	verifyImageArgsForCall []struct {
		arg1 *sign.Signer
		arg2 string
	}
	verifyImageReturns struct {
		result1 error
	}
	verifyImageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageImpl) Execute(arg1 string, arg2 ...string) error {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.ExecuteStub
	fakeReturns := fake.executeReturns
	fake.recordInvocation("Execute", []interface{}{arg1, arg2})
	fake.executeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImageImpl) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeImageImpl) ExecuteCalls(stub func(string, ...string) error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *FakeImageImpl) ExecuteArgsForCall(i int) (string, []string) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImageImpl) ExecuteReturns(result1 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageImpl) ExecuteReturnsOnCall(i int, result1 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageImpl) ExecuteOutput(arg1 string, arg2 ...string) (string, error) {
	fake.executeOutputMutex.Lock()
	ret, specificReturn := fake.executeOutputReturnsOnCall[len(fake.executeOutputArgsForCall)]
	fake.executeOutputArgsForCall = append(fake.executeOutputArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.ExecuteOutputStub
	fakeReturns := fake.executeOutputReturns
	fake.recordInvocation("ExecuteOutput", []interface{}{arg1, arg2})
	fake.executeOutputMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageImpl) ExecuteOutputCallCount() int {
	fake.executeOutputMutex.RLock()
	defer fake.executeOutputMutex.RUnlock()
	return len(fake.executeOutputArgsForCall)
}

func (fake *FakeImageImpl) ExecuteOutputCalls(stub func(string, ...string) (string, error)) {
	fake.executeOutputMutex.Lock()
	defer fake.executeOutputMutex.Unlock()
	fake.ExecuteOutputStub = stub
}

func (fake *FakeImageImpl) ExecuteOutputArgsForCall(i int) (string, []string) {
	fake.executeOutputMutex.RLock()
	defer fake.executeOutputMutex.RUnlock()
	argsForCall := fake.executeOutputArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImageImpl) ExecuteOutputReturns(result1 string, result2 error) {
	fake.executeOutputMutex.Lock()
	defer fake.executeOutputMutex.Unlock()
	fake.ExecuteOutputStub = nil
	fake.executeOutputReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageImpl) ExecuteOutputReturnsOnCall(i int, result1 string, result2 error) {
	fake.executeOutputMutex.Lock()
	defer fake.executeOutputMutex.Unlock()
	fake.ExecuteOutputStub = nil
	if fake.executeOutputReturnsOnCall == nil {
		fake.executeOutputReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.executeOutputReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageImpl) RepoTagFromTarball(arg1 string) (string, error) {
	fake.repoTagFromTarballMutex.Lock()
	ret, specificReturn := fake.repoTagFromTarballReturnsOnCall[len(fake.repoTagFromTarballArgsForCall)]
	fake.repoTagFromTarballArgsForCall = append(fake.repoTagFromTarballArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RepoTagFromTarballStub
	fakeReturns := fake.repoTagFromTarballReturns
	fake.recordInvocation("RepoTagFromTarball", []interface{}{arg1})
	fake.repoTagFromTarballMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImageImpl) RepoTagFromTarballCallCount() int {
	fake.repoTagFromTarballMutex.RLock()
	defer fake.repoTagFromTarballMutex.RUnlock()
	return len(fake.repoTagFromTarballArgsForCall)
}

func (fake *FakeImageImpl) RepoTagFromTarballCalls(stub func(string) (string, error)) {
	fake.repoTagFromTarballMutex.Lock()
	defer fake.repoTagFromTarballMutex.Unlock()
	fake.RepoTagFromTarballStub = stub
}

func (fake *FakeImageImpl) RepoTagFromTarballArgsForCall(i int) string {
	fake.repoTagFromTarballMutex.RLock()
	defer fake.repoTagFromTarballMutex.RUnlock()
	argsForCall := fake.repoTagFromTarballArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImageImpl) RepoTagFromTarballReturns(result1 string, result2 error) {
	fake.repoTagFromTarballMutex.Lock()
	defer fake.repoTagFromTarballMutex.Unlock()
	fake.RepoTagFromTarballStub = nil
	fake.repoTagFromTarballReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageImpl) RepoTagFromTarballReturnsOnCall(i int, result1 string, result2 error) {
	fake.repoTagFromTarballMutex.Lock()
	defer fake.repoTagFromTarballMutex.Unlock()
	fake.RepoTagFromTarballStub = nil
	if fake.repoTagFromTarballReturnsOnCall == nil {
		fake.repoTagFromTarballReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.repoTagFromTarballReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImageImpl) SignImage(arg1 *sign.Signer, arg2 string) error {
	fake.signImageMutex.Lock()
	ret, specificReturn := fake.signImageReturnsOnCall[len(fake.signImageArgsForCall)]
	fake.signImageArgsForCall = append(fake.signImageArgsForCall, struct {
		arg1 *sign.Signer
		arg2 string
	}{arg1, arg2})
	stub := fake.SignImageStub
	fakeReturns := fake.signImageReturns
	fake.recordInvocation("SignImage", []interface{}{arg1, arg2})
	fake.signImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImageImpl) SignImageCallCount() int {
	fake.signImageMutex.RLock()
	defer fake.signImageMutex.RUnlock()
	return len(fake.signImageArgsForCall)
}

func (fake *FakeImageImpl) SignImageCalls(stub func(*sign.Signer, string) error) {
	fake.signImageMutex.Lock()
	defer fake.signImageMutex.Unlock()
	fake.SignImageStub = stub
}

func (fake *FakeImageImpl) SignImageArgsForCall(i int) (*sign.Signer, string) {
	fake.signImageMutex.RLock()
	defer fake.signImageMutex.RUnlock()
	argsForCall := fake.signImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImageImpl) SignImageReturns(result1 error) {
	fake.signImageMutex.Lock()
	defer fake.signImageMutex.Unlock()
	fake.SignImageStub = nil
	fake.signImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageImpl) SignImageReturnsOnCall(i int, result1 error) {
	fake.signImageMutex.Lock()
	defer fake.signImageMutex.Unlock()
	fake.SignImageStub = nil
	if fake.signImageReturnsOnCall == nil {
		fake.signImageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.signImageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageImpl) VerifyImage(arg1 *sign.Signer, arg2 string) error {
	fake.verifyImageMutex.Lock()
	ret, specificReturn := fake.verifyImageReturnsOnCall[len(fake.verifyImageArgsForCall)]
	fake.verifyImageArgsForCall = append(fake.verifyImageArgsForCall, struct {
		arg1 *sign.Signer
		arg2 string
	}{arg1, arg2})
	stub := fake.VerifyImageStub
	fakeReturns := fake.verifyImageReturns
	fake.recordInvocation("VerifyImage", []interface{}{arg1, arg2})
	fake.verifyImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImageImpl) VerifyImageCallCount() int {
	fake.verifyImageMutex.RLock()
	defer fake.verifyImageMutex.RUnlock()
	return len(fake.verifyImageArgsForCall)
}

func (fake *FakeImageImpl) VerifyImageCalls(stub func(*sign.Signer, string) error) {
	fake.verifyImageMutex.Lock()
	defer fake.verifyImageMutex.Unlock()
	fake.VerifyImageStub = stub
}

func (fake *FakeImageImpl) VerifyImageArgsForCall(i int) (*sign.Signer, string) {
	fake.verifyImageMutex.RLock()
	defer fake.verifyImageMutex.RUnlock()
	argsForCall := fake.verifyImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImageImpl) VerifyImageReturns(result1 error) {
	fake.verifyImageMutex.Lock()
	defer fake.verifyImageMutex.Unlock()
	fake.VerifyImageStub = nil
	fake.verifyImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageImpl) VerifyImageReturnsOnCall(i int, result1 error) {
	fake.verifyImageMutex.Lock()
	defer fake.verifyImageMutex.Unlock()
	fake.VerifyImageStub = nil
	if fake.verifyImageReturnsOnCall == nil {
		fake.verifyImageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyImageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImageImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.executeOutputMutex.RLock()
	defer fake.executeOutputMutex.RUnlock()
	fake.repoTagFromTarballMutex.RLock()
	defer fake.repoTagFromTarballMutex.RUnlock()
	fake.signImageMutex.RLock()
	defer fake.signImageMutex.RUnlock()
	fake.verifyImageMutex.RLock()
	defer fake.verifyImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
